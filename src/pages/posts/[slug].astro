---
import Layout from "../../layouts/Layout.astro";
import PostCard from "../../components/PostCard.astro";
import PostPageSkeleton from "../../components/skeletons/PostPageSkeleton.astro";
import SocialShare from "../../components/SocialShare.astro";
import { fetchWithTimeout } from '@/lib/wp';
import { getPostViewCount, getMostViewedPosts } from '../../lib/views';
import { getPostInfo, getRelatedPosts } from '../../lib/wordpress';

const slug = Astro.params.slug;
if (!slug) return Astro.redirect('/404');

// Debug: Log the slug to see if it contains duplicates
console.log('üîç Current slug from params:', slug);

const domain = import.meta.env.WP_DOMAIN;
const apiUrl = `https://${domain}/wp-json/wp/v2`;

const postInfo = await getPostInfo(slug);
if (!postInfo) return Astro.redirect('/404');

const { title, date, seo, puntosClave, content, faqPairs, featuredImage, author, authorAvatar, excerpt, categories, id } = postInfo;

// Use the new advanced related posts algorithm
const relatedPosts = await getRelatedPosts(postInfo, 4);

const trendingPosts = await getMostViewedPosts();

const getTldr = (excerpt: string) => {
  if (!excerpt) return 'Resumen no disponible para este art√≠culo.';
  
  // Clean HTML tags and extra whitespace from excerpt
  const cleanExcerpt = excerpt.replace(/<[^>]*>/g, ' ')
                              .replace(/\s+/g, ' ')
                              .trim();
  
  // Return the complete excerpt without truncation
  return cleanExcerpt || 'Resumen no disponible para este art√≠culo.';
};

const tldr = getTldr(excerpt);

export const prerender = false;
---

<Layout 
  title={title}
  description={seo?.description || tldr}
  seo={seo}
  canonical={seo?.canonical}
  image={featuredImage}
  publishedTime={date}
  author={author}
  type="article"
  urlType="post"
>
  <div id="content-skeleton" class="animate-pulse">
    <PostPageSkeleton />
  </div>
  
  <div id="actual-content" style="display: none;">
    <div class="min-h-screen">
      <div class="max-w-[1200px] mx-auto px-4 sm:px-6 lg:px-8 py-8">
      
      <div class="lg:grid lg:grid-cols-12 lg:gap-8">
        
        <main class="lg:col-span-8">
          
          <header class="mb-8">

            {featuredImage && (
              <div class="mb-6 overflow-hidden rounded-2xl">
                <img 
                  src={featuredImage} 
                  alt={title}
                  class="w-full h-64 md:h-[400px] object-cover"
                  loading="eager"
                />
              </div>
            )}

            <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 leading-tight">
              {title}
            </h1>
            
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 text-gray-400 text-sm mb-6">
              <div class="flex items-center space-x-4">
                <div class="flex items-center space-x-3">
                  <img 
                    src={authorAvatar} 
                    alt={`Foto de perfil de ${author}`}
                    class="w-10 h-10 rounded-full ring-2 ring-[#2847d7]/30"
                  />
                  <div class="flex flex-col">
                    <span class="font-medium text-white text-base">{author}</span>
                    <span class="text-xs text-gray-400">Editor de Iquitos Tech</span>
                  </div>
                </div>
                
                <span class="hidden sm:inline">‚Ä¢</span>
                
                <div class="flex items-center space-x-1">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                  </svg>
                  <time datetime={date} class="text-gray-300">
                    {new Date(date).toLocaleDateString('es-ES', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}
                  </time>
                </div>
                
                <span class="hidden sm:inline">‚Ä¢</span>
                
                <div class="flex items-center space-x-1">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                  <span id="reading-time" class="text-gray-300">5 min de lectura</span>
                </div>

                <span class="hidden sm:inline">‚Ä¢</span>

                <div class="flex items-center space-x-1">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  <span class="text-gray-300">Iquitos, Per√∫</span>
                </div>
              </div>
            </div>

            <div class="bg-gradient-to-r from-[#2847d7]/10 to-blue-600/10 border border-[#2847d7]/30 rounded-xl p-6 mb-6">
              <h2 class="text-lg font-semibold text-white mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2 text-[#2847d7]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                TL;DR
              </h2>
              <p class="text-gray-300 leading-relaxed text-base">
                {tldr}
              </p>
            </div>
          </header>

          {puntosClave && (
            <section class="content-area">
              <h2 class="text-2xl font-bold text-[#2847d7] mb-4">Puntos clave</h2>
              <div class="max-w-none mb-8" set:html={puntosClave} />
            </section>
          )}

          <section class="content-area">
            <div class="max-w-none mb-8" set:html={content} />
          </section>

          {faqPairs.length > 0 && (
            <section class="content-area">
              <h2 class="text-2xl font-bold text-[#2847d7] mb-6">Preguntas frecuentes</h2>
              <div class="space-y-4">
                {faqPairs.map((faq: {question: string, answer: string}, index: number) => (
                  <div class="border border-[#2847d7] rounded-lg faq-item">
                    <input type="checkbox" id={`faq${index}`} class="hidden faq-checkbox" />
                    <label for={`faq${index}`} class="flex justify-between items-center p-4 bg-gray-800 rounded-lg cursor-pointer hover:bg-gray-700 transition-colors duration-200 focus:outline-none">
                      <span class="font-medium text-white pr-4">{faq.question}</span>
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="w-5 h-5 text-gray-400 transform transition-transform duration-300 faq-icon"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        stroke-width="2"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    </label>
                    <div class="overflow-hidden max-h-0 faq-content transition-all duration-500 ease-in-out">
                      <div class="max-w-none p-4 text-gray-300" set:html={faq.answer} />
                    </div>
                  </div>
                ))}
              </div>
            </section>
          )}

          <section class="content-area">
            <SocialShare 
              title={title}
              url={`https://iquitostech.com/posts/${slug}`}
              description={seo?.description || tldr}
              image={featuredImage}
              hashtags={['IquitosTech', 'tecnologia', 'noticias']}
            />
          </section>

        </main>
        <aside class="lg:col-span-4 mt-12 lg:mt-0">
          <div class="lg:top-8 space-y-8">

            <div class="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-800">
              <h3 class="text-xl font-bold text-white mb-1 pb-2 border-b-2 border-[#2847d7] inline-block">
                Tendencias
              </h3>
              <p class="text-gray-400 text-sm mb-4">Lo m√°s le√≠do</p>
              
              <div class="space-y-4">
                {trendingPosts.slice(0, 6).map((post: any, index: number) => (
                  <a 
                    href={`/posts/${post.slug}`}
                    class="block group hover:bg-gray-800/50 p-3 rounded-lg transition-all duration-300"
                  >
                    <div class="flex items-start space-x-3">
                      <span class="flex-shrink-0 w-6 h-6 bg-[#2847d7] text-white text-xs font-bold rounded-full flex items-center justify-center">
                        {index + 1}
                      </span>
                      <div class="flex-1 min-w-0">
                        <h4 class="text-white font-medium text-sm leading-snug group-hover:text-[#2847d7] transition-colors duration-300 line-clamp-2">
                          {post.title}
                        </h4>
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>

          </div>
        </aside>
      </div>

      {relatedPosts.length > 0 && (
        <section class="mt-16 border-t border-gray-800 pt-12">
          <div class="flex items-center justify-between mb-8">
            <h2 class="text-2xl md:text-3xl font-bold text-white text-left">
              Art√≠culos Relacionados
            </h2>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {relatedPosts.slice(0, 4).map((post: any) => {
              const categoryName = post.categories?.[0]?.name || 'Sin categor√≠a';
              
              return (
                <div class="relative group">
                  <PostCard
                    id={post.id}
                    title={post.title}
                    excerpt={post.excerpt}
                    slug={post.slug}
                    date={post.date}
                    image={post.image}
                    category={categoryName}
                    featured={false}
                  />
                  
                </div>
              );
            })}
          </div>
          
        </section>
      )}

    </div>
  </div>
  </div>

  <script define:vars={{ slug }}>
    const POST_SLUG = slug;
    
    function isLikelyBot() {
      const userAgent = navigator.userAgent.toLowerCase();
      const botPatterns = [
        'googlebot', 'bingbot', 'slurp', 'duckduckbot', 'baiduspider',
        'yandexbot', 'facebookexternalhit', 'twitterbot', 'linkedinbot',
        'whatsapp', 'telegram', 'discord', 'crawler', 'spider', 'bot'
      ];
      
      return botPatterns.some(pattern => userAgent.includes(pattern));
    }

    async function trackRealView() {
      if (isLikelyBot()) {
        console.log('ü§ñ Bot detected, skipping view tracking');
        return;
      }

      const sessionKey = `viewed_post_${POST_SLUG}`;
      const alreadyViewed = sessionStorage.getItem(sessionKey);
      
      if (alreadyViewed) {
        console.log('üëÄ Post already viewed in this session, skipping increment');
        return;
      }

      try {
        sessionStorage.setItem(sessionKey, 'true');
        
        const response = await fetch('/api/increment-view', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ slug: POST_SLUG })
        });

        if (response.ok) {
          const data = await response.json();
          console.log(`üìä View tracked for ${POST_SLUG}. New count: ${data.views}`);
          
          const viewCountElement = document.getElementById('view-count');
          if (viewCountElement) {
            viewCountElement.textContent = `${data.views} vista${data.views === 1 ? '' : 's'}`;
          }
        } else {
          console.error('Failed to track view:', response.statusText);
        }
      } catch (error) {
        console.error('Error tracking view:', error);
      }
    }

    function calculateReadingTime() {
      const article = document.querySelector('.prose');
      if (article) {
        const text = article.textContent || '';
        const wordsPerMinute = 200;
        const words = text.trim().split(/\s+/).length;
        const readingTime = Math.ceil(words / wordsPerMinute);
        
        const readingTimeElement = document.getElementById('reading-time');
        if (readingTimeElement) {
          readingTimeElement.textContent = `${readingTime} min de lectura`;
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      calculateReadingTime();
      
      setTimeout(() => {
        trackRealView();
      }, 2000);
    });
  </script>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .peer-checked\:max-h-screen:checked ~ * {
    max-height: 1000px;
  }

  html {
    scroll-behavior: smooth;
  }

  label:focus {
    outline: none;
  }

  input[type="checkbox"]:focus + label {
    outline: 2px solid #2847d7;
    outline-offset: 2px;
  }

  @media (max-width: 1024px) {
    .lg\:sticky {
      position: relative !important;
    }
  }

  .content-area h1,
  .content-area h2,
  .content-area h3,
  .content-area h4,
  .content-area h5,
  .content-area h6 {
    color: inherit !important;
    font-weight: inherit !important;
  }

  .content-area p {
    color: inherit !important;
    margin-bottom: inherit !important;
    line-height: inherit !important;
  }

  .content-area img {
    border-radius: inherit !important;
    margin: inherit !important;
    width: inherit !important;
  }

  .content-area ul,
  .content-area ol {
    color: inherit !important;
    margin: inherit !important;
    padding-left: inherit !important;
  }

  .content-area li {
    color: inherit !important;
    margin-bottom: inherit !important;
  }

  .content-area a {
    color: inherit !important;
    text-decoration: inherit !important;
  }

  .content-area blockquote {
    color: inherit !important;
    border-left: inherit !important;
    padding: inherit !important;
    background: inherit !important;
  }

  .content-area code {
    background-color: inherit !important;
    color: inherit !important;
    padding: inherit !important;
    border-radius: inherit !important;
  }

  .content-area pre {
    background-color: inherit !important;
    border: inherit !important;
    padding: inherit !important;
    border-radius: inherit !important;
  }

  .content-area table {
    width: inherit !important;
    border: inherit !important;
    background: inherit !important;
  }

  .content-area th,
  .content-area td {
    color: inherit !important;
    border: inherit !important;
    padding: inherit !important;
  }

  .faq-checkbox:checked + label .faq-icon {
    transform: rotate(180deg);
  }

  .faq-checkbox:checked ~ .faq-content {
    max-height: 1000px;
  }
</style>